package com.vamer.Pharma.pharmacyclientapp.activities;import android.app.Activity;import android.app.Dialog;import android.app.ProgressDialog;import android.content.Intent;import android.location.Address;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.Response;import com.android.volley.RetryPolicy;import com.android.volley.VolleyError;import com.android.volley.toolbox.JsonObjectRequest;import com.android.volley.toolbox.StringRequest;import com.vamer.Pharma.pharmacyclientapp.AppController;import com.vamer.Pharma.pharmacyclientapp.R;import com.vamer.Pharma.pharmacyclientapp.adapter.SingleCheckAdapter;import com.vamer.Pharma.pharmacyclientapp.model.Location;import com.vamer.Pharma.pharmacyclientapp.util.AppConstants;import com.vamer.Pharma.pharmacyclientapp.util.GPSTracker;import com.vamer.Pharma.pharmacyclientapp.util.PreferenceHelper;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import es.dmoral.toasty.Toasty;public class CurrentLocationActivity extends AppCompatActivity implements AdapterView.OnItemClickListener {    String Address, Building_no, Floor, Appartment, LocationName;    String GPS_Latitude;    String GPS_Longitude;    EditText textViewlocation_name;    EditText textViewAddress;    EditText textViewBuilding_no;    EditText textViewFloor;    EditText textViewAppartment;    Button btnGoToAvailablePharmacies;    Button btnSaveMyLocation;    Location MyLocation;    PreferenceHelper pr;    Button btnCurrentLocation, btnSavedLocations;    int layoutVisible;    RecyclerView LocationsRecylcerview;    GPSTracker gps;    Location locationFromList;    /*ExpandableLinearLayout expandableCurrentLayout;    ExpandableLinearLayout expandableSavedLayout;*/    LinearLayout expandableLinearCurrentLayout, expandableLinearSavedLayout;    private SingleCheckAdapter locationAdapter;    private List<Location> mLocationSingleCheckList = new ArrayList<>();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_current_location);        pr = PreferenceHelper.getPrefernceHelperInstace();        initiateUI();        showCurrentLayout();        hideSavedLayout();        gps = new GPSTracker(this);        // check if GPS enabled        if (gps.canGetLocation()) {            double latitude = gps.getLatitude();            double longitude = gps.getLongitude();            GetAddress(this, latitude, longitude);        } else {            // can't get location            // GPS or Network is not enabled            // Ask user to enable GPS/network in settings            gps.showSettingsAlert();        }    }    @Override    protected void onResume() {        super.onResume();        textViewAddress.clearFocus();        textViewAddress.clearFocus();        getMyLocations();    }    private void initiateUI() {        // Toolbar        ((Toolbar) findViewById(R.id.toolbar)).setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });        LocationsRecylcerview = findViewById(R.id.LocationsRecylcerview);        LocationsRecylcerview.setLayoutManager(new LinearLayoutManager(this));        locationAdapter = new SingleCheckAdapter(CurrentLocationActivity.this, mLocationSingleCheckList);        locationAdapter.setOnItemClickListener(this);        LocationsRecylcerview.setAdapter(locationAdapter);        btnCurrentLocation = findViewById(R.id.btnCurrentLocation);        expandableLinearCurrentLayout = findViewById(R.id.expandableLinearCurrentLayout);        expandableLinearSavedLayout = findViewById(R.id.expandableLinearSavedLayout);        btnSavedLocations = findViewById(R.id.btnSavedLocations);        btnSavedLocations.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (expandableLinearSavedLayout.getVisibility() == View.VISIBLE) {                    hideSavedLayout();                    showCurrentLayout();                } else if (expandableLinearSavedLayout.getVisibility() == View.GONE) {                    showSavedLayout();                    hideCurrentLayout();                }                layoutVisible = 0;            }        });        btnCurrentLocation.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (expandableLinearCurrentLayout.getVisibility() == View.VISIBLE) {                    hideCurrentLayout();                    showSavedLayout();                } else if (expandableLinearCurrentLayout.getVisibility() == View.GONE) {                    showCurrentLayout();                    hideSavedLayout();                }                layoutVisible = 0;            }        });        textViewAddress = findViewById(R.id.address);        textViewlocation_name = findViewById(R.id.location_name);        textViewBuilding_no = findViewById(R.id.building_no);        textViewFloor = findViewById(R.id.Floor);        textViewAppartment = findViewById(R.id.Appartment);        btnGoToAvailablePharmacies = findViewById(R.id.btnGoToAvailablePharmacies);        btnSaveMyLocation = findViewById(R.id.btnSaveMyLocation);        btnSaveMyLocation.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // getInputs();                SaveMyLocation(MyLocation);            }        });        btnGoToAvailablePharmacies.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                goToAvailablePharmacies();            }        });        //hideCurrentLayout();        //  getMyLocations();    }    public void goToAvailablePharmacies() {        if (expandableLinearCurrentLayout.getVisibility() == View.VISIBLE) {            if (validateInputs())                initializeLocationFromInputEditTexts();        } else if (expandableLinearSavedLayout.getVisibility() == View.VISIBLE) {            if (locationFromList != null) {                Intent i = new Intent(CurrentLocationActivity.this, GetNearPharmacies.class);                i.putExtra("GPS_Latitude", locationFromList.getGPS_Latitude());                i.putExtra("GPS_Longitude", locationFromList.getGPS_Longitude());                i.putExtra("AppartmentNo", locationFromList.getLocationAppartmentNumber());                i.putExtra("BuildingNo", locationFromList.getLocationBuildingNumber());                i.putExtra("Address", locationFromList.getLocationAddress());                i.putExtra("FloorNo", locationFromList.getLocationFloorNumber());                i.putExtra("LocationName", locationFromList.getLocationName());                startActivity(i);            } else {                Toasty.error(CurrentLocationActivity.this, getResources().getString(R.string.error_location_empty), Toast.LENGTH_SHORT, true).show();            }        }    }    private boolean validateInputs() {        if (textViewAddress.getText().toString().trim().length() == 0) {            textViewAddress.setError(getResources().getString(R.string.address_error));            return false;        }        if (textViewBuilding_no.getText().toString().trim().length() == 0) {            textViewBuilding_no.setError(getResources().getString(R.string.Building_number_error));            return false;        }        if (textViewFloor.getText().toString().trim().length() == 0) {            textViewFloor.setError(getResources().getString(R.string.Floor_error));            return false;        }        if (textViewAppartment.getText().toString().trim().length() == 0) {            textViewAppartment.setError(getResources().getString(R.string.Apartment_error));            return false;        } else            return true;    }    private void initializeLocationFromInputEditTexts() {        Address = textViewAddress.getText().toString();        Building_no = textViewBuilding_no.getText().toString();        LocationName = textViewlocation_name.getText().toString();        Floor = textViewFloor.getText().toString();        Appartment = textViewAppartment.getText().toString();        MyLocation = new Location(LocationName, Address, Building_no, Floor, Appartment, GPS_Latitude, GPS_Longitude);        createDialog();    }    private void createDialog() {        final Dialog dialog = new Dialog(CurrentLocationActivity.this);        dialog.setContentView(R.layout.custom_save_dialog);        // dialog.setTitle("Title...");        Button yes = (Button) dialog.findViewById(R.id.btn_yes);        Button no = (Button) dialog.findViewById(R.id.btn_no);        final EditText LocationName = dialog.findViewById(R.id.location_name);        // set the custom dialog components - text, image and button        no.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent i = new Intent(CurrentLocationActivity.this, GetNearPharmacies.class);                i.putExtra("GPS_Latitude", MyLocation.getGPS_Latitude());                i.putExtra("GPS_Longitude", MyLocation.getGPS_Longitude());                i.putExtra("Address", MyLocation.getLocationAddress());                i.putExtra("BuildingNo", MyLocation.getLocationBuildingNumber());                i.putExtra("AppartmentNo", MyLocation.getLocationAppartmentNumber());                i.putExtra("FloorNo", MyLocation.getLocationFloorNumber());                startActivity(i);                dialog.dismiss();            }        });        yes.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (LocationName.getText().toString().trim().length() > 0) {                    MyLocation.setLocationName(LocationName.getText().toString());                    SaveMyLocation(MyLocation);                    dialog.dismiss();                } else                    Toasty.error(CurrentLocationActivity.this, getResources().getString(R.string.insert_location_name), Toast.LENGTH_SHORT, true).show();            }        });        // if button is clicked, close the custom dialog        dialog.show();    }    public void getLocationFromMap(View v) {        Intent intent = new Intent(this, PickMarketPlaceAddressActivity.class);        startActivityForResult(intent, 1);        //  startActivity(new Intent(CurrentLocationActivity.this,PickMarketPlaceAddressActivity.class));    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        // check that it is the SecondActivity with an OK result        if (requestCode == 1) {            if (resultCode == RESULT_OK) {                // get String data from Intent                Address = data.getStringExtra("address");                // double a=  data.getDoubleExtra("piclat",0);                GPS_Latitude = String.valueOf(data.getDoubleExtra("piclat", 0));                GPS_Longitude = String.valueOf(data.getDoubleExtra("piclang", 0));                //  GPS_Longitude = data.getDoubleExtra("piclang");                textViewAddress.setText(Address);            }        }    }    public void SaveMyLocation(final Location myLocation) {        final ProgressDialog progressDialog = new ProgressDialog(this);        progressDialog.setMessage(getResources().getString(R.string.pleasewait));        progressDialog.setCancelable(false);        progressDialog.show();        Map<String, String> postParam = new HashMap<String, String>();        postParam.put(PreferenceHelper.CUSTOMER_TOKEN, pr.getString(CurrentLocationActivity.this, PreferenceHelper.CUSTOMER_TOKEN, ""));        postParam.put("LocationName", myLocation.getLocationName());        postParam.put("Address", myLocation.getLocationAddress());        postParam.put("BuildingNo", myLocation.getLocationBuildingNumber());        postParam.put("FloorNo", myLocation.getLocationFloorNumber());        postParam.put("AppartmentNo", myLocation.getLocationAppartmentNumber());        postParam.put("GPS_Latitude", myLocation.getGPS_Latitude());        postParam.put("GPS_Longitude", myLocation.getGPS_Longitude());        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST, AppConstants.API_BASE_URL + "Customer/AddLocation", new JSONObject(postParam),                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        progressDialog.dismiss();                        try {                            String Status = response.getString("Status");                            if (Status.equals(AppConstants.success)) {                                Toasty.success(CurrentLocationActivity.this, getResources().getString(R.string.location_added), Toast.LENGTH_SHORT, true).show();                                Intent i = new Intent(CurrentLocationActivity.this, GetNearPharmacies.class);                                i.putExtra("GPS_Latitude", myLocation.getGPS_Latitude());                                i.putExtra("GPS_Longitude", myLocation.getGPS_Longitude());                                i.putExtra("Address", myLocation.getLocationAddress());                                i.putExtra("BuildingNo", myLocation.getLocationBuildingNumber());                                i.putExtra("AppartmentNo", myLocation.getLocationAppartmentNumber());                                i.putExtra("FloorNo", myLocation.getLocationFloorNumber());                                startActivity(i);                            } else {                                Toasty.error(CurrentLocationActivity.this, getResources().getString(R.string.location_not_added), Toast.LENGTH_SHORT, true).show();                            }                            //Todo                            // saveUserData(Result.getString("MobNo"),Result.getString("Name"),Result.getString("Token"),Result.getString("Gender"));                            // Toasty.error(LoginOrRegisterActivity.this,getResources().getString(R.string.verification_code_not_sent) , Toast.LENGTH_SHORT, true).show();                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                progressDialog.dismiss();            }        }) {            /**             * Passing some request headers             */            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<String, String>();                headers.put("Content-Type", "application/json; charset=utf-8");                headers.put("Authorization", "Basic YWhtZWQ6YWhtZWQ=");                return headers;            }        };        // Adding request to request queue        AppController.getInstance().addToRequestQueue(jsonObjReq, "tag");    }    private void showCurrentLayout() {        expandableLinearCurrentLayout.setVisibility(View.VISIBLE);        expandableLinearCurrentLayout.requestFocus();    }    private void hideCurrentLayout() {       /* expandableCurrentLayout.toggle();        expandableCurrentLayout.clearAnimation();*/        expandableLinearCurrentLayout.setVisibility(View.GONE);        MyLocation = null;    }    private void showSavedLayout() {        //   expandableSavedLayout.toggle();        //expandableSavedLayout.clearAnimation();        expandableLinearSavedLayout.setVisibility(View.VISIBLE);        expandableLinearSavedLayout.requestFocus();    }    private void hideSavedLayout() {       /* expandableSavedLayout.toggle();        expandableSavedLayout.clearAnimation();*/        expandableLinearSavedLayout.setVisibility(View.GONE);    }    public void getMyLocations() {        final String TAG = "ASI";        final Map<String, String> postParam = new HashMap<String, String>();        postParam.put("CustomerToken", pr.getString(CurrentLocationActivity.this, PreferenceHelper.CUSTOMER_TOKEN, ""));        Log.e("Posts Data ", postParam.toString());        JsonObjectRequest jsonObjReq = new JsonObjectRequest(Request.Method.POST,                AppConstants.API_BASE_URL + "Customer/GetMyLocations/", new JSONObject(postParam),                new Response.Listener<JSONObject>() {                    @Override                    public void onResponse(JSONObject response) {                        // progressDialog.dismiss();                        Log.d(TAG, response.toString());                        try {                            String flag = response.getString("Status");                            if (flag.equals(AppConstants.success)) {                                JSONArray jsonArray = response.getJSONArray("Result");                                mLocationSingleCheckList.clear();                                for (int i = 0; i < jsonArray.length(); i++) {                                    JSONObject jsonObject = jsonArray.getJSONObject(i);                                    Location LocationModel = new Location(jsonObject.getString("Location_ID"), jsonObject.getString("LocationName"), jsonObject.getString("Address"), jsonObject.getString("BuildingNo"), jsonObject.getString("FloorNo"), jsonObject.getString("AppartmentNo"), jsonObject.getString("GPS_Latitude"), jsonObject.getString("GPS_Longitude"));                                    mLocationSingleCheckList.add(LocationModel);                                }                                locationAdapter.notifyDataSetChanged();                                //  LocationsRecylcerview.setAdapter(locationAdapter);                            } else {                                Toast.makeText(CurrentLocationActivity.this, "There is an error try again later ", Toast.LENGTH_SHORT).show();                            }                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                Log.d(TAG, "Error: " + error.getMessage());                Toast.makeText(CurrentLocationActivity.this, error.getMessage(), Toast.LENGTH_SHORT).show();                // progressDialog.dismiss();            }        }) {            /**             * Passing some request headers             * */            @Override            public Map<String, String> getHeaders() throws AuthFailureError {                HashMap<String, String> headers = new HashMap<String, String>();                headers.put("Content-Type", "application/json; charset=utf-8");                headers.put("Authorization", "Basic YWhtZWQ6YWhtZWQ=");                return headers;            }        };        // Adding request to request queue        AppController.getInstance().addToRequestQueue(jsonObjReq, "TAG");        jsonObjReq.setRetryPolicy(new RetryPolicy() {            @Override            public int getCurrentTimeout() {                return 50000;            }            @Override            public int getCurrentRetryCount() {                return 50000;            }            @Override            public void retry(VolleyError error) throws VolleyError {            }        });    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        Toast.makeText(CurrentLocationActivity.this, position + " - " + mLocationSingleCheckList.get(position).getLocationName(), Toast.LENGTH_SHORT).show();        locationFromList = mLocationSingleCheckList.get(position);        //  MyLocation = mLocationSingleCheckList.get(position);    }    public void GetAddress(Activity activity, double lat, final double lng) {        StringRequest strReq = new StringRequest(Request.Method.POST,                "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + String.valueOf(lat) + "," + String.valueOf(lng) + "&sensor=true&language=en", new Response.Listener<String>() {            @Override            public void onResponse(String response) {                List<android.location.Address> res = new ArrayList<Address>();                try {                    double lon;                    double lat;                    JSONObject jsonObject = new JSONObject(response);                    JSONArray array = (JSONArray) jsonObject.get("results");                    lon = array.getJSONObject(0).getJSONObject("geometry").getJSONObject("location").getDouble("lng");                    GPS_Longitude = String.valueOf(lon);                    lat = array.getJSONObject(0).getJSONObject("geometry").getJSONObject("location").getDouble("lat");                    GPS_Latitude = String.valueOf(lat);                    Address = array.getJSONObject(0).getString("formatted_address");                    textViewAddress.setText(Address);                } catch (JSONException e) {                    e.printStackTrace();                }            }        }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {            }        });        // Adding request to request queue        int socketTimeout = 50000;//30 seconds - change to what you want        RetryPolicy policy = new DefaultRetryPolicy(socketTimeout, DefaultRetryPolicy.DEFAULT_MAX_RETRIES, DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);        strReq.setRetryPolicy(policy);        // Adding request to request queue        AppController.getInstance().addToRequestQueue(strReq, "tag");    }}